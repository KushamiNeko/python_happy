# (generated with --quick)

import flask.wrappers
from typing import Any, Dict, Optional, Type

CandleSticksPreset: Any
DAILY: Any
FREQUENCY: Any
FuturesTransaction: Any
HOURLY: Any
MONTHLY: Any
TradingAgent: Any
WEEKLY: Any
base64: module
datetime: Type[datetime.datetime]
io: module
os: module
random: module
re: module
request: flask.wrappers.Request

class ChartHandler:
    _book: Any
    _date: datetime.datetime
    _frequency: Any
    _function: Any
    _params: dict
    _show_records: Any
    _store: Dict[str, Any]
    _symbol: Any
    def __init__(self) -> None: ...
    def _function_backward(self) -> io.BytesIO: ...
    def _function_forward(self) -> io.BytesIO: ...
    def _function_inspect(self) -> str: ...
    def _function_quote(self) -> Dict[str, Any]: ...
    def _function_randomDate(self) -> io.BytesIO: ...
    def _function_simple(self) -> io.BytesIO: ...
    def _function_slice(self) -> io.BytesIO: ...
    def _read_records(self, title: str) -> Optional[list]: ...
    def _render(self, preset) -> io.BytesIO: ...
    @classmethod
    def _store_clear_symbol(cls, symbol: str) -> None: ...
    def _store_key(self) -> str: ...
    @classmethod
    def _store_read(cls, key: str, dtime: Optional[datetime.datetime] = ..., time_sliced: bool = ...) -> Any: ...
    @classmethod
    def _store_write(cls, key: str, preset) -> None: ...
    def response(self) -> Any: ...
